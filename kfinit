#!/bin/bash

set -e -o pipefail

# conditional for DEBUG mode
if [ "${DEBUG}" = 1 ]; then
    set -x
elif [ "${DRYRUN}" = 1 ]; then
    RUNTEST=1
fi

# variables
KFENV=https://raw.githubusercontent.com/glayneon/kfinit/main/kfenv

# loading environtal variables using curl
curlsource() {
    LOADING_FILE=$(basename $1)
    echo "[INFO] ::: Loading Environtal Variables from ${LOADING_FILE} ..."
    f=$(mktemp -t curlsource.XXX)
    curl -o "$f" -sSL "$1"
    source "$f"
    rm -f "$f"
}

# import all required variables for installation
curlsource ${KFENV}
curlsource ${FUNCTIONS}

# Installation Flag: true or false
if [ -z "${KF_VERSION}" ]; then
    usage
    exit 1
fi

# install GUM
# install_gum

# show title along with the current mode
# show_title ${PROJECT_NAME}

# Install Kubeflow components in order
# 0. clone git and working directory
clone_git ${KF_VERSION}

# 1. cert-manager
install_cert_manager

# 2. istio
install_istio

# 3. Oauth2-proxy
install_oauth2_proxy

# 4. dex
install_dex

# 5. knative
install_knative

# 6. namespace, network policy, roles and istio
install_kubeflow_resources

# 7. Kubeflow pipeline
install_kubeflow_pipeline

# 8. KServeand model-web-app
install_kserve

# 9. Katib
install_katib

# 10. Central Dashboard and admission webhook
install_central_dashboard

# 11. notebook controller and Jupyter web app
install_notebook

# 12. PVC Viewer Controller
install_pvc_viewer
# 13. Profiles and KFAM
install_profiles
# 14. Volume Web App
install_volume_webapp
# 15. Tensorboard webapp and controller
install_tensorboard

# 16. Traning operator
install_training_operator

# 17. user namespace
install_user_namespace

# 18. Port Forwarding to Central Dashboard
config_port_forwarding

# Check the service is running
if [ "${DRYRUN}" != 1 ]; then
    info "::: Start - Running Kubeflow service for about 90 seconds ..."
    # gum spin --spinner line --title "::: Running Kubeflow service... " -- systemctl start rke2-${RKE2_TYPE}.service
    gum spin --spinner line --title "::: Running Kubeflow service... " sleep 10
    # journalctl -u rke2-server -f

    double_line
    info "::: Finish - Running Kubeflow service ... "
    sleep ${DELAY}
fi

# install cert-manager, argocd-cli and longhorn
# install_tools_cli

# generate self-signed cert
# gen_cert

if [ "${DRYRUN}" != 1 ]; then
    # Ending
    double_line
    info "::: Finish installation of Kubeflow with ${KF_VERSION}..."
    info "::: ..."
    info "::: ..."
fi
